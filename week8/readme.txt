week8讲学点：
1.下礼拜周日进行《程序员的自我修养》的读书报告，并写出思维导图
《Linux内核分析》毛德操
《深入理解计算机系统》——网上上的很多关于这本书的博客,深入讲解ELF格式（Linux环境中2进制文件格式，物理地址=f(逻辑地址+时间地址)
《》
计算机四大基本模块：数据结构和算法(推荐大话数据结构）、计算机组成原理、操作系统、计算机网络


2.进程：程序（代码）在资源集合上的一次运行过程
	程序（代码）放在PC/IP中，资源集合——资源表格
	=code+{PCB+I/O设备+内存+PC}

	系统I/O(内核级） 系统缓冲
	标准I/O（用户级） 系统缓冲+用户缓冲
	

	用户打开设备表——此处有图——I/O设备
	内存映射表——此处有图——内存
	
	表格实现了封装
	地址扩充——间接索引、多级指针

	PC——某个时刻cpu寄存器的快照

	C语言中返回值有三种方式——return ，指针、全局变量、静态变量
	
	同一代码可以派生多个进程，所以内存此区域的text禁止修改
	

3.进程查看
	ls /proc/ 查看运行的进程，相当于window中的控制台
	一个进程成功信息向stdout输出，失败信息向stderr输出
	如果想输出到内存，则使用管道，IPC,亲缘进程

4.gcc知识的拓展
	gcc编译器的用处：
	语法分析、词法分析、按照具体平台的二进制文件地址分布绑定功能区的线性地址

5.
	基础最小硬件初始化  Bootloader(写在CMOS芯片中的BIOS)——>0#全部硬件初始化——>1#软件环境初始化
6.
	shell包括csh,bash等命令解释器

7.计算机的构造与解释


8.类自然语言——>（编译原理）汇编语言和二进制文件——>计算机硬件运行
CPU、编译器、操作系统
广义二进制（所有信息二进制表示）
		1.以硬件电路运行编码（内容）具备运行可能性(库、可执行、内核文件）
		2.对人的思维逻辑进行编码
	语句|指令
	语言——>人的逻辑
	指令——>物理、电路

	gcc、MSVC编译器，世界两大编译器

	编译器功能
	1.词法分析——符合分析，;等，保留关键字——关键字、用户定义的信息
	2.语法分析——逻辑目的for,if等——高级语言与汇编语言的共同点
	3.按照平台二进制格式填充相关的功能段，分配线性地址空间。

	程序错误分为
	1.静态错误——编译器的帮助
	2.运行时错误——core dump主要是ELF里面的地址错误，违反线性地址规则或地址耗尽——反应的是ELF映像

	ELF格式
	
	为了PCB占用尽可能小的线性地址，对PCB中的内容分为高频和低频信息，高频信息占字节数少（用表首指针作为表常驻内存——>索引技术、多级指针——>扩充线性地址），大型的表格、地址映射表为低频（放入硬盘中的交换分区，形成虚拟内存）
	系统区中PCB、系统缓冲、驱动设备表、管道文件、中断向量表

	功能function两种实现方式
	1.电路——>快 简单功能BIOS、MMU，一般解决高频电路
	2.软件实现

	page fault
	1.违反线性地址规则，操作系统运行一定使用系统区地址，app运行一定使用用户区地址。——蓝屏现象
	2.堆栈握手，线性地址空间耗尽，
				1.使用索引技术、多级指针解决等解决方案
				2.减少静态变量的使用，编译器进行代码优化。

	运行时所有进程所共享的信息存于系统区
	动态共享库映射区、动态链接存在用户区（可选区，因链接方式而变）

	线性地址是连续的且功能区分布固定——>进行逆向工程的原理。线性地址随机化进行解决生成伪线性地址。
